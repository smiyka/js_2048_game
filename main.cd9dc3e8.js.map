{"version":3,"sources":["scripts/main.js"],"names":["board","score","rows","colums","lose","gameScore","document","querySelector","button","messageStart","messageWin","messageLose","setGame","r","c","updateTile","getElementById","setTow","hasEmptyTile","found","Math","floor","random","tile","innerText","classList","add","num","value","remove","filterZero","row","filter","slide","cells","i","length","push","slideLeft","slideRight","reverse","slideUp","column","slideDown","addEventListener","e","replace","innerHTML","code","includes"],"mappings":"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","file":"main.cd9dc3e8.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet board = [];\nlet score = 0;\nconst rows = 4;\nconst colums = 4;\nlet lose = false;\n\nconst gameScore = document.querySelector('.game-score');\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nbutton.addEventListener('click', (e) => {\n  setGame();\n  setTow();\n  setTow();\n  button.classList.replace('start', 'restart');\n  button.innerText = 'Restart';\n  lose = false;\n  gameScore.innerHTML = 0;\n  score = 0;\n\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n});\n\ndocument.addEventListener('keyup', (e) => {\n  if (lose) {\n    return;\n  };\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      slideLeft();\n      setTow();\n      break;\n    case 'ArrowRight':\n      slideRight();\n      setTow();\n      break;\n    case 'ArrowUp':\n      slideUp();\n      setTow();\n      break;\n    case 'ArrowDown':\n      slideDown();\n      setTow();\n      break;\n  };\n\n  gameScore.innerText = score;\n\n  for (let r = 0; r < rows; r++) {\n    if (board[r].includes(2048)) {\n      messageWin.classList.remove('hidden');\n    }\n  }\n});\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < rows; c++) {\n      const tile = document.getElementById(r + '-' + c);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    };\n  };\n};\n\nfunction setTow() {\n  if (!hasEmptyTile()) {\n    return;\n  };\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * colums);\n\n    if (board[r][c] === 0) {\n      board[r][c] = Math.random() > 0.9 ? 4 : 2;\n\n      const tile = document.getElementById(r + '-' + c);\n\n      tile.innerText = board[r][c];\n      tile.classList.add('field-cell--' + board[r][c]);\n      found = true;\n    };\n  };\n};\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.innerText = num;\n\n    if (num < 2048) {\n      tile.classList.add('field-cell--' + num);\n    } else {\n      tile.classList.add('field-cell--2048');\n    };\n  };\n};\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < colums; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      };\n    };\n  };\n\n  messageLose.classList.remove('hidden');\n  lose = true;\n\n  return false;\n};\n\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n};\n\nfunction slide(cells) {\n  let row = filterZero(cells);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (row[i] === row[i + 1]) {\n      row[i] *= 2;\n      row[i + 1] = 0;\n      score += row[i];\n    };\n  };\n\n  row = filterZero(row);\n\n  while (row.length < colums) {\n    row.push(0);\n  };\n\n  return row;\n};\n\nfunction slideLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = slide(row);\n    board[r] = row;\n\n    for (let c = 0; c < colums; c++) {\n      const tile = document.getElementById(r + '-' + c);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    };\n  };\n};\n\nfunction slideRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    board[r] = row;\n\n    for (let c = 0; c < colums; c++) {\n      const tile = document.getElementById(r + '-' + c);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    };\n  };\n};\n\nfunction slideUp() {\n  for (let c = 0; c < rows; c++) {\n    let column = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    column = slide(column);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = column[r];\n\n      const tile = document.getElementById(r + '-' + c);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    };\n  };\n};\n\nfunction slideDown() {\n  for (let c = 0; c < rows; c++) {\n    let column = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    column.reverse();\n    column = slide(column);\n    column.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = column[r];\n\n      const tile = document.getElementById(r + '-' + c);\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    };\n  };\n};\n"]}